#!/usr/bin/env python3

from assemble import assemble
from execute import execute
from sys import argv, exit
from signal import SIGINT, signal

def read(filename):
	try:
		with open(filename, mode = 'rb') as source_file:
			return source_file.read()
	except:
		exit('Cannot open file %s.' % filename)

signal(SIGINT, lambda signal, _:exit(128 + signal))
flags = {'a': False, 'c': False, 'd': False}
usage = 'sesos [-%s] <basename>' % ''.join(flags.keys())

while len(argv) > 2 and argv[1].startswith('-'):
	for char in argv.pop(1)[1:]:
		if char in flags.keys():
			flags[char] = True
		else:
			exit(usage)

if len(argv) != 2 or argv[1].startswith('-'):
	exit(usage)

extensions = ('.sbin', '.sasm')
filename_in = argv[1] + extensions[flags['a']]

if flags['a']:
	filename_in = argv[1] + '.sasm'
	filename_out = argv[1] + '.sbin'
	try:
		assembly_code = read(filename_in)
	except:
		exit('Cannot read from file %s.' % repr(filename_in))
	binary_code = assemble(assembly_code)
	try:
		with open(filename_out, mode = 'wb') as file_out:
			file_out.write(binary_code)
	except:
		exit('Cannot write to file %s.' % repr(filename_out))
else:
	filename = argv[1] + '.sbin'
	try:
		code = read(filename)
	except:
		exit('Cannot read from file %s.' % repr(filename))
	execute(code, count = flags['c'], debug = flags['d'])